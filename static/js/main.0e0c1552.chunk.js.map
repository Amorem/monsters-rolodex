{"version":3,"sources":["components/card/Card.js","components/cardList/CardList.js","components/searchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","monster","name","src","concat","id","email","CardList","monsters","map","Card_Card","key","SearchBox","_ref","handleSearch","type","placeholder","onChange","App","state","searchText","e","_this","setState","target","value","fetch","result","json","resJSON","this","_this$state","filteredMonsters","filter","toLowerCase","includes","SearchBox_SearchBox","CardList_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAGaA,qBAAO,SAAAC,GAAK,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAKL,EAAMM,QAAQC,KACnBC,IAAG,wBAAAC,OAA0BT,EAAMM,QAAQI,GAAK,EAA7C,gBAELT,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,QAAQC,MACnBN,EAAAC,EAAAC,cAAA,SAAIH,EAAMM,QAAQK,UCNTC,EAAW,SAAAZ,GAAK,OAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMa,SAASC,IAAI,SAAAR,GAAO,OACzBL,EAAAC,EAAAC,cAACY,EAAD,CAAMT,QAASA,EAASU,IAAKV,EAAQI,SCJ9BO,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAH,OACvBlB,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVgB,KAAK,SACLC,YAAY,YACZC,SAAUH,MC8BCI,6MAhCbC,MAAQ,CACNX,SAAU,GACVY,WAAY,MAWdN,aAAe,SAAAO,GACbC,EAAKC,SAAS,CAAEH,WAAYC,EAAEG,OAAOC,4NARhBC,MAAM,2DAArBC,kBACgBA,EAAOC,cAAvBC,SACNC,KAAKP,SAAS,CACZf,SAAUqB,uIAQL,IAAAE,EAC0BD,KAAKX,MAA9BX,EADDuB,EACCvB,SAAUY,EADXW,EACWX,WACZY,EAAmBxB,EAASyB,OAAO,SAAAhC,GAAO,OAC9CA,EAAQC,KAAKgC,cAAcC,SAASf,EAAWc,iBAEjD,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACsC,EAAD,CAAWtB,aAAcgB,KAAKhB,eAC9BlB,EAAAC,EAAAC,cAACuC,EAAD,CAAU7B,SAAUwB,YA3BVM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0e0c1552.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nexport const Card = props => (\n  <div className=\"card-container\">\n    <img\n      alt={props.monster.name}\n      src={`https://robohash.org/${props.monster.id + 1}/?set=set2`}\n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./CarList.css\";\nimport { Card } from \"../card/Card\";\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => (\n      <Card monster={monster} key={monster.id} />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\nexport const SearchBox = ({ handleSearch }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder=\"Search...\"\n    onChange={handleSearch}\n  />\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/cardList/CardList\";\nimport { SearchBox } from \"./components/searchBox/SearchBox\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchText: \"\"\n  };\n\n  async componentDidMount() {\n    const result = await fetch(\"http://jsonplaceholder.typicode.com/users\");\n    const resJSON = await result.json();\n    this.setState({\n      monsters: resJSON\n    });\n  }\n\n  handleSearch = e => {\n    this.setState({ searchText: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchText } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox handleSearch={this.handleSearch} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}